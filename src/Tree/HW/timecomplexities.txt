The time complexities of max and min heap operations using heapify or other common methods are as follows:

Building a Heap (Heapify):

Time Complexity: O(n), where n is the number of elements in the input array or list.
Building a heap using heapify involves iterating over each element and performing heap operations (such as heapify or sift-up/sift-down) to maintain the heap property.
Since each element is processed once, the time complexity is linear.


Insertion:

Time Complexity: O(log n), where n is the number of elements in the heap.
Insertion involves adding a new element at the last position of the heap and then performing a series of comparisons and swaps (sift-up) to restore the heap property.
The number of comparisons and swaps is proportional to the height of the heap, which is logarithmic to the number of elements.


Deletion (Extract-Max or Extract-Min):

Time Complexity: O(log n), where n is the number of elements in the heap.
Deletion involves removing the root element (max or min) from the heap and replacing it with the last element.
Then, a series of comparisons and swaps (sift-down) are performed to restore the heap property. Similar to insertion, the number of comparisons and swaps is proportional to the height of the heap, resulting in a logarithmic time complexity.


Accessing Maximum/Minimum (Get-Max or Get-Min):

Time Complexity: O(1). Accessing the maximum or minimum element from the heap can be done in constant time as these elements are located at the root of the heap.


Changing Priority (Increase-Key or Decrease-Key):

Time Complexity: O(log n), where n is the number of elements in the heap.
changing the priority of an element involves modifying its value and then performing a series of comparisons and swaps (sift-up or sift-down) to restore the heap property.
The number of comparisons and swaps is proportional to the height of the heap, resulting in a logarithmic time complexity.
Overall, the key operations in a max or min heap have a time complexity of O(log n) for insertion, deletion, and changing priority, while building a heap using heapify has a time complexity of O(n). Accessing the maximum or minimum element can be done in constant time (O(1)).